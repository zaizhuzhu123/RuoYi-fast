package ${packageName}.service.impl;


import java.util.List;
###if($table.tree)
##import java.util.ArrayList;
##import com.ruoyi.framework.web.domain.Ztree;
###end
###foreach ($column in $columns)
###if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.google.common.collect.Lists;
##import com.ruoyi.common.utils.DateUtils;
###break
###end
###end
##import org.springframework.beans.factory.annotation.Autowired;
##import org.springframework.stereotype.Service;
###if($table.sub)
##import java.util.ArrayList;
##import com.ruoyi.common.utils.StringUtils;
##import org.springframework.transaction.annotation.Transactional;
##import ${packageName}.${businessName}.domain.${subClassName};
###end
##import ${packageName}.${businessName}.mapper.${ClassName}Mapper;
##import ${packageName}.${businessName}.domain.${ClassName};
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${packageName}.entity.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;
import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import com.laien.demo.constant.GlobalConstant;
import com.google.common.collect.Lists;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;

##import ${packageName}.${businessName}.service.I${ClassName}Service;
import com.ruoyi.common.utils.text.Convert;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{
    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
        return getById(id);
##        return ${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}List(${className});
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className})
    {
        return save(${className}) ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
        LambdaUpdateWrapper<${ClassName}> updateWrapper = new LambdaUpdateWrapper<>();
        updateWrapper.eq(${ClassName}::getId, demoTheme.getId());
        return update(${className}, updateWrapper) ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */

    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(String ${pkColumn.javaField}s)
    {
        boolean b = removeByIds(Lists.newArrayList(Convert.toStrArray(ids)));
        return b ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
        boolean b = removeById(id);
        return b ? GlobalConstant.YES : GlobalConstant.NO;
    }
}
