package ${packageName}.service.impl;


##import java.util.List;
###if($table.tree)
##import java.util.ArrayList;
##import com.ruoyi.framework.web.domain.Ztree;
###end
###foreach ($column in $columns)
###if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.google.common.collect.Lists;
##import com.ruoyi.common.utils.DateUtils;
###break
###end
###end
##import org.springframework.beans.factory.annotation.Autowired;
##import org.springframework.stereotype.Service;
###if($table.sub)
##import java.util.ArrayList;
##import com.ruoyi.common.utils.StringUtils;
##import org.springframework.transaction.annotation.Transactional;
##import ${packageName}.${businessName}.domain.${subClassName};
###end
##import ${packageName}.${businessName}.mapper.${ClassName}Mapper;
##import ${packageName}.${businessName}.domain.${ClassName};
import org.apache.commons.lang3.StringUtils;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${packageName}.entity.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import com.laien.demo.constant.GlobalConstant;
import com.google.common.collect.Lists;
import com.laien.demo.response.PageRes;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.ruoyi.common.utils.sql.SqlUtil;
import com.ruoyi.framework.web.page.PageDomain;
import com.ruoyi.framework.web.page.TableSupport;
##import ${packageName}.${businessName}.service.I${ClassName}Service;
import com.ruoyi.common.utils.text.Convert;

import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service {
    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return getById(id);
    ##        return ${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public PageRes<${ClassName}> select${ClassName}List(Integer pageNum, Integer pageSize,${ClassName} ${className}) {
        PageDomain pageDomain = TableSupport.buildPageRequest();
        String orderBy = SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());
        Boolean reasonable = pageDomain.getReasonable();
        Page<Object> page = PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);
        JSONObject jsonObject = JSON.parseObject(JSON.toJSONString(${className}));
        Set<Map.Entry<String, Object>> entries = jsonObject.entrySet();
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        entries.stream().forEach(entry -> {
            Object value = entry.getValue();
            if (value != null) {
                if (value instanceof String) {
                    if (StringUtils.isNotBlank((CharSequence) value)) {
                        queryWrapper.like(com.baomidou.mybatisplus.core.toolkit.StringUtils.camelToUnderline(entry.getKey()), value);
                    }
                } else {
                    queryWrapper.eq(com.baomidou.mybatisplus.core.toolkit.StringUtils.camelToUnderline(entry.getKey()), value);
                }
            }
        });
        List<${ClassName}> ${className}s = list(queryWrapper);
        return new PageRes<>(pageNum, pageSize, page.getTotal(), page.getPages(), ${className}s);
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className}) {
        return save(${className}) ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className}) {
        LambdaUpdateWrapper<${ClassName}> updateWrapper = new LambdaUpdateWrapper<>();
        updateWrapper.eq(${ClassName}::getId, demoTheme.getId());
        return update(${className}, updateWrapper) ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */

    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(String ${pkColumn.javaField}s) {
        boolean b = removeByIds(Lists.newArrayList(Convert.toStrArray(ids)));
        return b ? GlobalConstant.YES : GlobalConstant.NO;
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        boolean b = removeById(id);
        return b ? GlobalConstant.YES : GlobalConstant.NO;
    }
}
